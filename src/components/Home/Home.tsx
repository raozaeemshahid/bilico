import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";

import { motion } from "framer-motion";
import LeftSideBar from "./leftSidebar";
import RightSideBar from "./rightSidebar";

import { useEffect, useState } from "react";
import Navbar from "../Navbar";
import { NavbarLinkCreator } from "../../lib/NavbarLinkProvider";
import { trpc } from "../../utils/trpc";
import { signOut, useSession } from "next-auth/react";
const Home: NextPage = () => {
  const { data: userSession } = useSession();

  const [isLeftBarOpen, changeIsLeftBarOpen] = useState(false);
  const [isRightBarOpen, changeIsRightBarOpen] = useState(false);

  const [isWindowLargerEnough, changeIsWindowLargerThanEnough] =
    useState(false);

  const deleteMe = trpc.me.deleteMyAccount.useMutation();

  useEffect(() => {
    const setToggler = () => {
      const isWindowLarger = window.innerWidth >= 768;
      changeIsWindowLargerThanEnough(isWindowLarger);
    };
    setToggler();
    window.addEventListener("resize", setToggler);
  }, []);

  useEffect(() => {
    if (isWindowLargerEnough) {
      changeIsLeftBarOpen(true);
      changeIsRightBarOpen(true);
    } else {
      changeIsLeftBarOpen(false);
      changeIsRightBarOpen(false);
    }
  }, [isWindowLargerEnough]);

  if (!userSession || !userSession.user) return <></>;
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="overflow-hidden bg-gray-700">
        <Navbar
          links={[
            NavbarLinkCreator.BlogLink(),
            NavbarLinkCreator.questionLink(),
            NavbarLinkCreator.storyLink(),
            NavbarLinkCreator.profileLink(userSession),
          ]}
          btns={
            process.env.NODE_ENV === "development"
              ? [
                  {
                    Text: "Delete",
                    onClick: async () => {
                      await deleteMe.mutateAsync();
                      signOut();
                    },
                  },
                ]
              : undefined
          }
        />

        <div className="mt-1 flex h-screen">
          <LeftSideBar
            isOpen={isLeftBarOpen}
            changeIsOpen={changeIsLeftBarOpen}
            isOtherOpen={isRightBarOpen}
            isWindowLargerEnough={isWindowLargerEnough}
          />
          <motion.div
            className={`m-10 w-full rounded-xl bg-gray-800 p-2 text-gray-100`}
          >
            Lorem
          </motion.div>

          <RightSideBar
            isOpen={isRightBarOpen}
            changeIsOpen={changeIsRightBarOpen}
            isWindowLargerEnough={isWindowLargerEnough}
          />
        </div>
      </div>
    </>
  );
};

export default Home;
