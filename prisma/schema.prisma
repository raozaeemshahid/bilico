// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Interest {
  id    String @id @default(uuid())
  title String @db.Text
  Users User[]
  Posts Post[]
}

model Skill {
  id    String @id @default(uuid())
  title String @db.Text
  Users User[]
}

model ReportToAdmin {
  id             String     @id @default(uuid())
  message        String?    @db.Text
  link           String
  type           ReportType
  CreatedAt      DateTime   @default(now())
  ReportedUser   User?      @relation("Reported", fields: [reportedUserId], references: [id])
  reportedUserId String?
  ReportedPost   Post?      @relation(fields: [reportedPostId], references: [id])
  reportedPostId String?

  @@index([reportedUserId])
  @@index([reportedPostId])
}

model ReactPost {
  id        String   @id @default(uuid())
  Reaction  Reaction
  CreatedAt DateTime @default(now())
  FromUser  User     @relation(fields: [userId], references: [id])
  userId    String
  ToPost    Post?    @relation(fields: [postId], references: [id])
  postId    String?

  @@index([userId])
  @@index([postId])
}

model Comment {
  id               String       @id @default(uuid())
  Comment          String       @db.Text
  CommentType      CommentType?
  OnPost           Post?        @relation(fields: [postId], references: [id])
  CreatedAt        DateTime     @default(now())
  CreatedBy        User         @relation(fields: [CommenterUserId], references: [id])
  CommenterUserId  String       @map("userId")
  LovedByAuthor    Boolean      @default(false)
  postId           String?
  replyToCommentId String?      @map("replyId")
  ReplyTo          Comment?     @relation("Replies", fields: [replyToCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Replies          Comment[]    @relation("Replies")

  Notification Notification[]

  @@index([postId])
  @@index([CommenterUserId])
  @@index([replyToCommentId])
}

model Post {
  id          String          @id @default(uuid())
  Body        String          @db.Text
  Interests   Interest[]
  CreatedBy   User            @relation(fields: [userId], references: [id])
  userId      String
  CreatedAt   DateTime        @default(now())
  Comments    Comment[]
  Reactions   ReactPost[]
  GetReported ReportToAdmin[]

  Notification Notification[]

  @@index([userId])
}

model Work {
  id        String   @id @default(uuid())
  Body      String   @db.Text
  CreatedBy User     @relation(fields: [userId], references: [id])
  userId    String
  CreatedAt DateTime @default(now())

  @@index([userId])
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  link      String
  ForUser   User     @relation("Notification For", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  isSeen    Boolean  @default(false)
  createdAt DateTime @default(now())

  byUserImage String?
  byUserName  String?
  byUserId    String?

  subText String? @db.Text

  Post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  postId    String?
  commentId String?

  @@index([userId])
  @@index([postId])
  @@index([commentId])
}

model Message {
  id         String   @id @default(uuid())
  message    String   @db.Text
  Sender     User     @relation("MessageSender", fields: [senderId], references: [id])
  senderId   String
  Receiver   User     @relation("MessageReceiver", fields: [receiverId], references: [id])
  receiverId String
  isSeen     Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@index([senderId])
  @@index([receiverId])
}

model ConnectionRequest {
  id         String   @id @default(uuid())
  message    String   @db.Text
  Sender     User     @relation("RequestSender", fields: [senderId], references: [id])
  senderId   String
  Receiver   User     @relation("RequestReceiver", fields: [receiverId], references: [id])
  receiverId String
  isSeen     Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@index([senderId])
  @@index([receiverId])
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  image         String?
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  DateOfBirth   String?
  Gender        Gender?
  Country       String?
  Bio           String?   @db.Text

  Interests Interest[]
  Skills    Skill[]

  Posts         Post[]
  Work          Work[]
  Notifications Notification[] @relation("Notification For")

  ConnectedTo   User[] @relation("Connect")
  ConnectedWith User[] @relation("Connect")

  Trust     User[] @relation("Trust")
  TrustedBy User[] @relation("Trust")

  Follow     User[] @relation("Follow")
  FollowedBy User[] @relation("Follow")

  MessagesSent    Message[] @relation("MessageSender")
  MessagesReceive Message[] @relation("MessageReceiver")

  Blocked   User[] @relation("Blocked")
  BlockedBy User[] @relation("Blocked")

  ConnectionRequestsSent    ConnectionRequest[] @relation("RequestSender")
  ConnectionRequestsReceive ConnectionRequest[] @relation("RequestReceiver")

  BannedUntil    DateTime?
  ReasonOfBanned String?
  isDeactivated  Boolean   @default(false)
  isVerified     Boolean   @default(false)

  Comments Comment[]

  ReactPosts ReactPost[]

  GetReported ReportToAdmin[] @relation("Reported")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ReportType {
  TO_UNBAN
  POST
  PERSON
}

enum CommentType {
  Opinion
  Appreciation
  Suggestion
  Question
}

enum Gender {
  Male
  Female
  Other
}

enum Reaction {
  Agree
  Disagree
  Love
}
