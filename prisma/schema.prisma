// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Interest {
  id        String     @id @default(uuid())
  title     String     @db.Text
  Users     User[]
  Posts     Post[]
  Questions Question[]
}

model Skill {
  id    String @id @default(uuid())
  title String @db.Text
  Users User[]
}

model ReportToAdmin {
  id              String        @id @default(uuid())
  message         String        @db.Text
  link            String
  type            ReportType
  CreatedAt       DateTime      @default(now())
  ReportedUser    User?         @relation("Reported", fields: [reportedUserId], references: [id])
  reportedUserId  String?
  ReportedPost    Post?         @relation(fields: [postId], references: [id])
  postId          String?
  ReportedAnswer  Answer?       @relation(fields: [answerId], references: [id])
  answerId        String?

  @@index([reportedUserId])
  @@index([postId])
  @@index([answerId])
}

model ReactPost {
  id       String   @id @default(uuid())
  Reaction Reaction
  CreatedAt       DateTime      @default(now())
  FromUser User     @relation(fields: [userId], references: [id])
  userId   String
  ToPost   Post     @relation(fields: [postId], references: [id])
  postId   String

  @@index([userId])
  @@index([postId])
}

model ReactComment {
  id        String   @id @default(uuid())
  reaction  Reaction
  CreatedAt       DateTime      @default(now())
  FromUser  User     @relation(fields: [userId], references: [id])
  userId    String
  ToComment Comment? @relation(fields: [commentId], references: [id])
  commentId String?

  @@index([userId])
  @@index([commentId])
}

model ReactReply {
  id               String        @id @default(uuid())
  Reaction         Reaction
  CreatedAt       DateTime      @default(now())
  FromUser         User          @relation(fields: [userId], references: [id])
  userId           String
  ToReply          CommentReply? @relation(fields: [commentRepliesId], references: [id])
  commentRepliesId String?

  @@index([userId])
  @@index([commentRepliesId])
}

model CommentReply {
  id          String          @id @default(uuid())
  reply       String
  ToComment   Comment         @relation(fields: [commentId], references: [id])
  commentId   String
  ByUser      User            @relation(fields: [userId], references: [id])
  userId      String
  Reactions   ReactReply[]

  @@index([commentId])
  @@index([userId])
}

model Comment {
  id            String          @id @default(uuid())
  Comment       String          @db.Text
  CommentType   CommentType
  OnPost        Post?           @relation(fields: [postId], references: [id])
  OnAnswer      Answer?         @relation(fields: [answerId], references: [id])
  CreatedAt     DateTime        @default(now())
  CreatedBy     User            @relation(fields: [userId], references: [id])
  userId        String
  Reactions     ReactComment[]
  Replies       CommentReply[]
  LovedByAuthor Boolean         @default(false)
  answerId      String?
  postId        String?

  @@index([postId])
  @@index([userId])
  @@index([answerId])
}

model AnswerUpvote {
  id         String @id @default(uuid())
  upvotedAns Answer @relation(fields: [answerId], references: [id])
  answerId   String
  UpvotedBy  User   @relation(fields: [userId], references: [id])
  userId     String

  @@index([answerId])
  @@index([userId])
}

model Answer {
  id                    String          @id @default(uuid())
  Answer                String          @db.Text
  AnsweredBy            User            @relation(fields: [userId], references: [id])
  userId                String
  AnswerTo              Question        @relation(fields: [questionId], references: [id])
  questionId            String
  doesAnswerTheQuestion Boolean         @default(false)
  createdAt             DateTime        @default(now())
  upvotes               AnswerUpvote[]
  GetReported           ReportToAdmin[]
  Comments              Comment[]

  @@index([userId])
  @@index([questionId])
}

model Question {
  id        String     @id @default(uuid())
  Body      String     @db.Text
  Interests Interest[]
  CreatedBy  User       @relation(fields: [userId], references: [id])
  userId    String
  CreatedAt  DateTime   @default(now())
  Answers   Answer[]

  @@index([userId])
}

model Post {
  id             String          @id @default(uuid())
  Body           String          @db.Text
  Interests      Interest[]
  CreatedBy      User            @relation(fields: [userId], references: [id])
  userId         String
  CreatedAt       DateTime        @default(now())
  Comments       Comment[]
  Reactions      ReactPost[]
  GetReported    ReportToAdmin[]

  @@index([userId])
}

model Notification {
  id        String           @id @default(uuid())
  title     String
  forUser   User             @relation("Notification For", fields: [userId], references: [id])
  userId    String
  isSeen    Boolean          @default(false)
  createdAt DateTime         @default(now())
  link      String
  type      NotificationType

  @@index([userId])
}

model Message {
  id         String   @id @default(uuid())
  message    String   @db.Text
  Sender     User     @relation("MessageSender", fields: [senderId], references: [id])
  senderId   String
  Receiver   User     @relation("MessageReceiver", fields: [receiverId], references: [id])
  receiverId String
  isSeen     Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@index([senderId])
  @@index([receiverId])
}

model ConnectionRequest {
  id         String  @id @default(uuid())
  message    String  @db.Text
  Sender     User    @relation("RequestSender", fields: [senderId], references: [id])
  senderId   String
  Receiver   User    @relation("RequestReceiver", fields: [receiverId], references: [id])
  receiverId String
  isSeen     Boolean @default(false)

  @@index([senderId])
  @@index([receiverId])
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  image         String?
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  DateOfBirth   String?
  Gender        Gender?
  Country       String?
  Bio           String?   @db.Text

  Interests Interest[]
  Skills    Skill[]

  Posts         Post[]
  Notifications Notification[] @relation("Notification For")

  ConnectedTo   User[] @relation("Connect")
  ConnectedWith User[] @relation("Connect")

  Trust     User[] @relation("Trust")
  TrustedBy User[] @relation("Trust")

  Follow     User[] @relation("Follow")
  FollowedBy User[] @relation("Follow")

  MessagesSent    Message[] @relation("MessageSender")
  MessagesReceive Message[] @relation("MessageReceiver")

  Blocked   User[] @relation("Blocked")
  BlockedBy User[] @relation("Blocked")

  ConnectionRequestsSent    ConnectionRequest[] @relation("RequestSender")
  ConnectionRequestsReceive ConnectionRequest[] @relation("RequestReceiver")

  BannedUntil    DateTime?
  ReasonOfBanned String?
  isDeactivated  Boolean   @default(false)
  isVerified     Boolean   @default(false)

  Comments Comment[]

  ReactPosts    ReactPost[]
  ReactComments ReactComment[]
  ReactReplies  ReactReply[]

  RepliesToComments CommentReply[]

  Questions      Question[]
  Answers        Answer[]
  UpvotedAnswers AnswerUpvote[]
  GetReported    ReportToAdmin[] @relation("Reported")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ReportType {
  TO_UNBAN
  POST
  ANSWER
  PERSON
}
enum CommentType {
    Agree
    Disagree
    Opinion
    Appreciation
  }


enum Gender {
  Male
  Female
  Other
}

enum NotificationType {
  REACTION
  COMMENT
  REPLY
  REPORT
}

enum Reaction {
  Agree
  Disagree 
  Love 
}
